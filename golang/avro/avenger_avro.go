// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     avenger.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// Schema of a Marvel character
type AvengerAvro struct {
	// The super hero name
	Name string `json:"name"`
	// Real life name
	Real_name string `json:"real_name"`
	// Movies the super hero is featured in
	Movies []string `json:"movies"`
}

const AvengerAvroAvroCRC64Fingerprint = "\x1bÌ¦p\x1c\x1b\xde\\"

func NewAvengerAvro() AvengerAvro {
	r := AvengerAvro{}
	r.Movies = make([]string, 0)

	r.Movies = make([]string, 0)

	return r
}

func DeserializeAvengerAvro(r io.Reader) (AvengerAvro, error) {
	t := NewAvengerAvro()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAvengerAvroFromSchema(r io.Reader, schema string) (AvengerAvro, error) {
	t := NewAvengerAvro()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAvengerAvro(r AvengerAvro, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Real_name, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Movies, w)
	if err != nil {
		return err
	}
	return err
}

func (r AvengerAvro) Serialize(w io.Writer) error {
	return writeAvengerAvro(r, w)
}

func (r AvengerAvro) Schema() string {
	return "{\"doc\":\"Schema of a Marvel character\",\"fields\":[{\"doc\":\"The super hero name\",\"name\":\"name\",\"type\":\"string\"},{\"doc\":\"Real life name\",\"name\":\"real_name\",\"type\":\"string\"},{\"default\":[],\"doc\":\"Movies the super hero is featured in\",\"name\":\"movies\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"bbejeck.chapter_3.avro.AvengerAvro\",\"type\":\"record\"}"
}

func (r AvengerAvro) SchemaName() string {
	return "bbejeck.chapter_3.avro.AvengerAvro"
}

func (_ AvengerAvro) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AvengerAvro) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AvengerAvro) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AvengerAvro) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AvengerAvro) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AvengerAvro) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AvengerAvro) SetString(v string)   { panic("Unsupported operation") }
func (_ AvengerAvro) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AvengerAvro) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Name}

		return w

	case 1:
		w := types.String{Target: &r.Real_name}

		return w

	case 2:
		r.Movies = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Movies}

		return w

	}
	panic("Unknown field index")
}

func (r *AvengerAvro) SetDefault(i int) {
	switch i {
	case 2:
		r.Movies = make([]string, 0)

		return
	}
	panic("Unknown field index")
}

func (r *AvengerAvro) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ AvengerAvro) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AvengerAvro) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AvengerAvro) HintSize(int)                     { panic("Unsupported operation") }
func (_ AvengerAvro) Finalize()                        {}

func (_ AvengerAvro) AvroCRC64Fingerprint() []byte {
	return []byte(AvengerAvroAvroCRC64Fingerprint)
}

func (r AvengerAvro) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["real_name"], err = json.Marshal(r.Real_name)
	if err != nil {
		return nil, err
	}
	output["movies"], err = json.Marshal(r.Movies)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AvengerAvro) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["real_name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Real_name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for real_name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["movies"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Movies); err != nil {
			return err
		}
	} else {
		r.Movies = make([]string, 0)

		r.Movies = make([]string, 0)

	}
	return nil
}
